syntax = "proto3";

package google.cloud.run.v1;

option go_package = "google.golang.org/genproto/googleapis/cloud/run/v1;run";

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
message ConfigMapEnvSource {
    // DEPRECATED
    // This field should not be used directly as it is meant to be inlined directly into the message. 
    // Use the "name" field instead.
    LocalObjectReference local_object_reference = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the ConfigMap must be defined
    bool optional = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The ConfigMap to select from.
    string name = 3;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Selects a key from a ConfigMap.
message ConfigMapKeySelector {
    // DEPRECATED
    // This field should not be used directly as it is meant to be inlined directly into the message. 
    // Use the "name" field instead.
    LocalObjectReference local_object_reference = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The key to select.   
    string key = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the ConfigMap or its key must be defined
    bool optional = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The ConfigMap to select from.
    string name = 4;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented 
// in a volume as files using the keys in the Data field as the file names, unless the items element 
// is populated with specific mappings of keys to paths.
message ConfigMapVolumeSource {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Name of the config.
    string name = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected 
    // into the volume as a file whose name is the key and content is the value. 
    // If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. 
    // If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
    repeated KeyToPath items = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Mode bits to use on created files by default. Must be a value between 0 and 0777. 
    // Defaults to 0644. Directories within the path are not affected by this setting. 
    // This might be in conflict with other options that affect the file mode, like fsGroup, 
    // and the result can be other mode bits set.
    int32 default_mode = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the Secret or its keys must be defined.
    bool optional = 4;
}

// A single application container. This specifies both the container to run, the command to run in the 
// container and the arguments to supply to it. Note that additional arguments may be supplied by the 
// system to the container at runtime.
message Container {
    // Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. 
    // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
    string name = 1;
    // Cloud Run fully managed: only supports containers from Google Container Registry
    // Cloud Run for Anthos: supported
    // URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
    string image = 2;
    repeated string command = 3;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. 
    // Variable references $(VAR_NAME) are expanded using the container's environment. 
    // If a variable cannot be resolved, the reference in the input string will be unchanged. 
    // The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). 
    // Escaped references will never be expanded, regardless of whether the variable exists or not. 
    // More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string args = 4;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // List of environment variables to set in the container.
    repeated EnvVar env = 5;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    ResourceRequirements resources = 6;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Container's working directory. If not specified, the container runtime's default will be used, 
    // which might be configured in the container image.
    string working_dir = 7;
    // List of ports to expose from the container. Only a single port can be specified. 
    // The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
    // If omitted, a port number will be chosen and passed to the container through the PORT environment variable 
    // for the container to listen on.
    repeated ContainerPort ports = 8;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // List of sources to populate environment variables in the container. 
    // The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event 
    // when the container is starting. When a key exists in multiple sources, the value associated with the 
    // last source will take precedence. Values defined by an Env with a duplicate key will take precedence. 
    // Cannot be updated.
    repeated EnvFromSource env_from = 9;
    // Cloud Run fully managed: supported
    // Volume to mount into the container's filesystem. Only supports SecretVolumeSources.
    // Cloud Run for Anthos: supported
    // Pod volumes to mount into the container's filesystem.
    repeated VolumeMount volume_mounts = 10;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Periodic probe of container liveness. Container will be restarted if the probe fails. 
    // More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    Probe liveness_probe = 11;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Periodic probe of container service readiness. Container will be removed from service endpoints 
    // if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    Probe readiness_probe = 12;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: not supported
    // Startup probe of application within the container. All other probes are disabled if a startup probe is provided, 
    // until it succeeds. Container will not be added to service endpoints if the probe fails. 
    // More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    Probe startup_probe = 13;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Path at which the file to which the container's termination message will be written is mounted into the 
    // container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. 
    // Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be 
    // limited to 12kb. Defaults to /dev/termination-log.
    string termination_message_path = 14;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Indicate how the termination message should be populated. File will use the contents of 
    // terminationMessagePath to populate the container status message on both success and failure. 
    // FallbackToLogsOnError will use the last chunk of container log output if the termination message 
    // file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, 
    // whichever is smaller. Defaults to File. Cannot be updated.
    string termination_message_policy = 15;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, 
    // or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    string image_pull_policy = 16;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Security options the pod should run with. 
    // More info: https://kubernetes.io/docs/concepts/policy/security-context/ 
    // More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    SecurityContext security_context = 17;
}

// ContainerPort represents a network port in a single container.
message ContainerPort {
    // If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
    string name = 1;
    // Port number the container listens on. This must be a valid port number, 0 < x < 65536.
    int32 container_port = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Protocol for port. Must be "TCP". Defaults to "TCP".
    string protocol = 3;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// EnvFromSource represents the source of a set of ConfigMaps
message EnvFromSource {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    string prefix = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The ConfigMap to select from
    ConfigMapEnvSource config_map_ref = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The Secret to select from
    SecretEnvSource secret_ref = 3;
}

// EnvVar represents an environment variable present in a Container.
message EnvVar {
    // Name of the environment variable. Must be a C_IDENTIFIER.
    string name = 1;
    // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container 
    // and any route environment variables. If a variable cannot be resolved, the reference in the input string will 
    // be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). 
    // Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    string value = 2;
    // Cloud Run fully managed: supported
    // Source for the environment variable's value. Only supports secret_key_ref.
    // Cloud Run for Anthos: supported
    // Source for the environment variable's value. Cannot be used if value is not empty.
    EnvVarSource value_from = 3;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// EnvVarSource represents a source for the value of an EnvVar.
message EnvVarSource {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Selects a key of a ConfigMap.
    ConfigMapKeySelector config_map_key_ref = 1;
    // Cloud Run fully managed: supported.
    // Selects a key (version) of a secret in Secret Manager.
    // Cloud Run for Anthos: supported.
    // Selects a key of a secret in the pod's namespace.
    SecretKeySelector secret_key_ref = 2;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// ExecAction describes a "run in container" action.
message ExecAction {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Command is the command line to execute inside the container, the working directory for the command 
    // is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, 
    // so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out 
    // to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    repeated string command = 1;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// HTTPGetAction describes an action based on HTTP Get requests.
message HTTPGetAction {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Path to access on the HTTP server.
    string path = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    string host = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Scheme to use for connecting to the host. Defaults to HTTP.
    string scheme = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Custom headers to set in the request. HTTP allows repeated headers.
    repeated HTTPHeader http_headers = 4;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// HTTPHeader describes a custom header to be used in HTTP probes
message HTTPHeader {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The header field name
    string name = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The header field value
    string value = 2;
}

// Cloud Run fully managed: supported
// Cloud Run for Anthos: supported
// Maps a string key to a path within a volume.
message KeyToPath {
    // Cloud Run fully managed: supported
    // The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
    // Cloud Run for Anthos: supported
    // The key to project.
    string key = 1;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // The relative path of the file to map the key to. May not be an absolute path. 
    // May not contain the path element '..'. May not start with the string '..'.
    string path = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Mode bits to use on this file, must be a value between 0000 and 0777. 
    // If not specified, the volume defaultMode will be used. This might be in conflict with other options 
    // that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 mode = 3;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
message LocalObjectReference {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
message Probe {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Number of seconds after the container has started before liveness probes are initiated. 
    // More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 initial_delay_seconds = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. 
    // More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 timeout_seconds = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    int32 period_seconds = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Minimum consecutive successes for the probe to be considered successful after having failed. 
    // Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    int32 success_threshold = 4;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Minimum consecutive failures for the probe to be considered failed after having succeeded. 
    // Defaults to 3. Minimum value is 1.
    int32 failure_threshold = 5;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // One and only one of the following should be specified. Exec specifies the action to take.
    // A field inlined from the Handler message.
    ExecAction exec = 6;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // HTTPGet specifies the http request to perform.
    // A field inlined from the Handler message.
    HTTPGetAction http_get = 7;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    // A field inlined from the Handler message.
    TCPSocketAction tcp_socket = 8;
}

// ResourceRequirements describes the compute resource requirements.
message ResourceRequirements {
    // Cloud Run fully managed: Only memory and CPU are supported. 
    // Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory.
    // Cloud Run for Anthos: supported
    // Limits describes the maximum amount of compute resources allowed. The values of the map is string form 
    // of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    map<string, string> limits = 1;
    // Cloud Run fully managed: Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'.
    // Cloud Run for Anthos: supported
    // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to 
    // Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: 
    // https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
    map<string, string> requests = 2;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// SecretEnvSource selects a Secret to populate the environment variables with.
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
message SecretEnvSource {
    // This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
    LocalObjectReference local_object_reference = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the Secret must be defined
    bool optional = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The Secret to select from.
    string name = 3;
}

// Cloud Run fully managed: supported
// Cloud Run for Anthos: supported
// SecretKeySelector selects a key of a Secret.
message SecretKeySelector {
    // This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
    LocalObjectReference local_object_reference = 1;
    // Cloud Run fully managed: supported
    // A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version.
    // Cloud Run for Anthos: supported
    // The key of the secret to select from. Must be a valid secret key.
    string key = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the Secret or its key must be defined
    bool optional = 3;
    // Cloud Run fully managed: supported
    // The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. 
    // If the secret is in another project, you must define an alias. 
    // An alias definition has the form: :projects/<project-id|project-number>/secrets/. 
    // If multiple alias definitions are needed, they must be separated by commas. 
    // The alias definitions must be set on the run.googleapis.com/secrets annotation.
    // Cloud Run for Anthos: supported
    // The name of the secret in the pod's namespace to select from.
    string name = 4;
}

// Cloud Run fully managed: supported
// The secret's value will be presented as the content of a file whose name is defined in the item path. 
// If no items are defined, the name of the file is the secret_name.
// Cloud Run for Anthos: supported
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the 
// Data field as the file names.
message SecretVolumeSource {
    // Cloud Run fully managed: supported
    // The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. 
    // If the secret is in another project, you must define an alias. 
    // An alias definition has the form: :projects/<project-id|project-number>/secrets/. 
    // If multiple alias definitions are needed, they must be separated by commas. 
    // The alias definitions must be set on the run.googleapis.com/secrets annotation.
    // Cloud Run for Anthos: supported
    // Name of the secret in the container's namespace to use.
    string secret_name = 1;
    // Cloud Run fully managed: supported
    // If unspecified, the volume will expose a file whose name is the secret_name. 
    // If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be 
    // the name of the file exposed in the volume. When items are defined, they must specify a key and a path.
    // Cloud Run for Anthos: supported
    // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected 
    // into the volume as a file whose name is the key and content is the value. 
    // If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. 
    // If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
    repeated KeyToPath items = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Mode bits to use on created files by default. Must be a value between 0000 and 0777. 
    // Defaults to 0644. Directories within the path are not affected by this setting. 
    // This might be in conflict with other options that affect the file mode, like fsGroup, 
    // and the result can be other mode bits set.
    // NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly 
    // as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
    int32 default_mode = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Specify whether the Secret or its keys must be defined.
    bool optional = 4;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// SecurityContext holds security configuration that will be applied to a container. 
// Some fields are present in both SecurityContext and PodSecurityContext. 
// When both are set, the values in SecurityContext take precedence.
message SecurityContext {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. 
    // May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, 
    // the value specified in SecurityContext takes precedence.
    int32 run_as_user = 1;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// TCPSocketAction describes an action based on opening a socket
message TCPSocketAction {
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Number or name of the port to access on the container. Number must be in the range 1 to 65535. 
    // Name must be an IANA_SVC_NAME.
    // This field is currently limited to integer types only because of proto's inability to properly 
    // support the IntOrString golang type.
    int32 port = 1;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Optional: Host name to connect to, defaults to the pod IP.
    string host = 2;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// Volume represents a named volume in a container.
message Volume {
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // Volume's name.
    string name = 1;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    SecretVolumeSource secret = 2;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    ConfigMapVolumeSource config_map = 3;
}

// Cloud Run fully managed: not supported
// Cloud Run for Anthos: supported
// VolumeMount describes a mounting of a Volume within a container.
message VolumeMount {
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // This must match the Name of a Volume.
    string name = 1;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // Only true is accepted. Defaults to true.
    bool read_only = 2;
    // Cloud Run fully managed: supported
    // Cloud Run for Anthos: supported
    // Path within the container at which the volume should be mounted. Must not contain ':'.
    string mount_path = 3;
    // Cloud Run fully managed: not supported
    // Cloud Run for Anthos: supported
    // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    string sub_path = 4;
}